Microsoft (R) Macro Assembler Version 14.29.30147.0	    02/12/23 20:42:10
'Proj3_zamoraab     (Proj3_zamoraab.asm			     Page 1 - 1


				TITLE Proj3_zamoraab     (Proj3_zamoraab.asm)

				; Author: Abraham Zamora
				; Last Modified: 2/6/2023
				; OSU email address: zamoraab@oregonstate.edu
				; Course number/section:   CS271 Section 271/400
				; Project Number: Project Number 3                Due Date: 2/12/2023
				; Description: Program asks user to pick a value between [-200,-100] and [-50,-1].
				;	If user enters a negative number not within that range, program will keep prompting user.
				;	If user enters a number greater than -1, program will then calculate sum of all user numbers, average, min, and max.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 =-000000C8			LOWEST_LIMIT = -200
 =-00000001			HIGHEST_LIMIT = -1
 =-00000064			MID_LIMIT_ONE =	-100
 =-00000032			MID_LIMIT_TWO =	-50

 00000000			.data
				; String variables	
 00000000 57 65 6C 63 6F		progIntro		byte	"Welcome to the Integer Accumulator by Abraham Zamora.", 0
	   6D 65 20 74 6F
	   20 74 68 65 20
	   49 6E 74 65 67
	   65 72 20 41 63
	   63 75 6D 75 6C
	   61 74 6F 72 20
	   62 79 20 41 62
	   72 61 68 61 6D
	   20 5A 61 6D 6F
	   72 61 2E 00
 00000036 57 65 20 77 69		progDescr		byte	"We will be accumulating user-input negative integers between the specified bounds,",13,10
	   6C 6C 20 62 65
	   20 61 63 63 75
	   6D 75 6C 61 74
	   69 6E 67 20 75
	   73 65 72 2D 69
	   6E 70 75 74 20
	   6E 65 67 61 74
	   69 76 65 20 69
	   6E 74 65 67 65
	   72 73 20 62 65
	   74 77 65 65 6E
	   20 74 68 65 20
	   73 70 65 63 69
	   66 69 65 64 20
	   62 6F 75 6E 64
	   73 2C 0D 0A
 0000008A  74 68 65 6E 20						byte	"then displaying statistics of the input values including minimum, maximum, and average values values,",13,10
	   64 69 73 70 6C
	   61 79 69 6E 67
	   20 73 74 61 74
	   69 73 74 69 63
	   73 20 6F 66 20
	   74 68 65 20 69
	   6E 70 75 74 20
	   76 61 6C 75 65
	   73 20 69 6E 63
	   6C 75 64 69 6E
	   67 20 6D 69 6E
	   69 6D 75 6D 2C
	   20 6D 61 78 69
	   6D 75 6D 2C 20
	   61 6E 64 20 61
	   76 65 72 61 67
	   65 20 76 61 6C
	   75 65 73 20 76
	   61 6C 75 65 73
	   2C 0D 0A
 000000F1  74 6F 74 61 6C						byte	"total sum, and total number of valid inputs.", 0
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 6F 74 61 6C
	   20 6E 75 6D 62
	   65 72 20 6F 66
	   20 76 61 6C 69
	   64 20 69 6E 70
	   75 74 73 2E 00
 0000011E 57 68 61 74 20		greeting		byte	"What is your name? ", 0
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 20 00
 00000132 48 65 6C 6C 6F		greetCont		byte	"Hello there, ", 0
	   20 74 68 65 72
	   65 2C 20 00
 00000140  00000019 [			userName		byte	25 DUP(0)
	    00
	   ]
					
 00000159 50 6C 65 61 73		instrucVar		byte	"Please enter numbers in [-200,100] or [-50,-1].", 0
	   65 20 65 6E 74
	   65 72 20 6E 75
	   6D 62 65 72 73
	   20 69 6E 20 5B
	   2D 32 30 30 2C
	   31 30 30 5D 20
	   6F 72 20 5B 2D
	   35 30 2C 2D 31
	   5D 2E 00
 00000189 45 6E 74 65 72		instrucVar2		byte	"Enter a non-negative number when you are finished, and input stats will be shown.", 0
	   20 61 20 6E 6F
	   6E 2D 6E 65 67
	   61 74 69 76 65
	   20 6E 75 6D 62
	   65 72 20 77 68
	   65 6E 20 79 6F
	   75 20 61 72 65
	   20 66 69 6E 69
	   73 68 65 64 2C
	   20 61 6E 64 20
	   69 6E 70 75 74
	   20 73 74 61 74
	   73 20 77 69 6C
	   6C 20 62 65 20
	   73 68 6F 77 6E
	   2E 00
 000001DB 45 6E 74 65 72		numInput		byte	"Enter number: ", 0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 000001EA 54 68 69 73 20		invalInput		byte	"This is not a number we're looking for (Invalid Input)!", 0
	   69 73 20 6E 6F
	   74 20 61 20 6E
	   75 6D 62 65 72
	   20 77 65 27 72
	   65 20 6C 6F 6F
	   6B 69 6E 67 20
	   66 6F 72 20 28
	   49 6E 76 61 6C
	   69 64 20 49 6E
	   70 75 74 29 21
	   00
 00000222 59 6F 75 20 65		confirmOne		byte	"You entered ", 0
	   6E 74 65 72 65
	   64 20 00
 0000022F 20 76 61 6C 69		confirmTwo		byte	" valid numbers", 0
	   64 20 6E 75 6D
	   62 65 72 73 00
 0000023E 54 68 65 20 6D		maxNum			byte	"The maximum number is ", 0
	   61 78 69 6D 75
	   6D 20 6E 75 6D
	   62 65 72 20 69
	   73 20 00
 00000255 54 68 65 20 6D		minNum			byte	"The minimum number is ", 0
	   69 6E 69 6D 75
	   6D 20 6E 75 6D
	   62 65 72 20 69
	   73 20 00
 0000026C 54 68 65 20 73		sumNum			byte	"The sum of your valid numbers is ", 0
	   75 6D 20 6F 66
	   20 79 6F 75 72
	   20 76 61 6C 69
	   64 20 6E 75 6D
	   62 65 72 73 20
	   69 73 20 00
 0000028E 54 68 65 20 72		avgNum			byte	"The rounded average is ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 20 00
 000002A6 57 65 20 68 61		outroMess		byte	"We have to stop meeting like this. Farewell, ", 0
	   76 65 20 74 6F
	   20 73 74 6F 70
	   20 6D 65 65 74
	   69 6E 67 20 6C
	   69 6B 65 20 74
	   68 69 73 2E 20
	   46 61 72 65 77
	   65 6C 6C 2C 20
	   00
 000002D4 4E 6F 20 76 61		noNumbers		byte	"No valid numbers entered. Try again.", 0
	   6C 69 64 20 6E
	   75 6D 62 65 72
	   73 20 65 6E 74
	   65 72 65 64 2E
	   20 54 72 79 20
	   61 67 61 69 6E
	   2E 00
				; Integer variables and user inputs

 000002F9 00000000			userNum1		SDWORD	?		; user will input this number
 000002FD 00000000			validNumber		DWORD	0		; will increment with each valid number
 00000301 00000000			sumNumbers		SDWORD	0		; the sum of all valid numbers
 00000305 FFFFFF37			maxNumbers		SDWORD	-201	; max number entered. default is less than lowest limit	
 00000309 FFFFFFFF			minNumbers		SDWORD	-1		; min number entered. default is set to zero
 0000030D 00000000			averageNums		SDWORD	?		; calculating average

 00000000			.code

 00000000			main PROC

				;-------------------------
				; Program Intro that asks user for name, stores name in variable, and
				;	lets user know the instructions of the program. 
				;
				;
				;--------------------------
 00000000  BA 00000000 R		mov		EDX, OFFSET	progIntro
 00000005  E8 00000000 E		call	WriteString
 0000000A  E8 00000000 E		call	CrLf

 0000000F  BA 00000036 R		mov		EDX,	OFFSET	progDescr	
 00000014  E8 00000000 E		call	WriteString
 00000019  E8 00000000 E		call	CrLf

 0000001E  BA 0000011E R		mov		EDX, OFFSET	greeting
 00000023  E8 00000000 E		call	WriteString
 00000028  BA 00000140 R		mov		EDX, OFFSET	userName	; ask for the username
 0000002D  B9 00000018			mov		ECX, 24
 00000032  E8 00000000 E		CALL	ReadString

 00000037  BA 00000132 R		mov		EDX, OFFSET	greetCont
 0000003C  E8 00000000 E		call	WriteString
 00000041  BA 00000140 R		mov		EDX, OFFSET	userName
 00000046  E8 00000000 E		call	WriteString
 0000004B  E8 00000000 E		call	CrLf
					

 00000050  BA 00000159 R		mov		EDX, OFFSET	instrucVar
 00000055  E8 00000000 E		CALL	WriteString
 0000005A  E8 00000000 E		CALL	CrLf
 0000005F  BA 00000189 R		mov		EDX, OFFSET	instrucVar2
 00000064  E8 00000000 E		call	WriteString
 00000069  E8 00000000 E		call	CrLf
 0000006E  EB 00			jmp		_userPrompt


				;--------------------------
				; Asks the user to give a number between the ranges of [-200,-100] and [-50,-1].
				;	If the user inputs a number greater than -1, moves to check valid numbers
				;	If the number is less than 0, program checks if the number is between the defined ranges.
				;	If the number is within the ranges, program jumps to _validNum.
				;	If not within the range, will jump to _notValid
				;-------------------------
 00000070			_userPrompt:
 00000070  BA 000001DB R		mov		EDX, OFFSET numInput	; asks user for number
 00000075  E8 00000000 E		call	WriteString
 0000007A  E8 00000000 E		call	ReadInt
 0000007F  A3 000002F9 R		mov		userNum1, EAX
 00000084  BB 00000000			mov		EBX, 0
 00000089  39 1D 000002F9 R		cmp		userNum1, EBX			
 0000008F  79 71			JNS		_totalValid				; if input number is not negative, jump to check total valid numbers

 00000091  A1 000002F9 R		mov		eax, userNum1
 00000096  3D FFFFFF38			cmp		eax, LOWEST_LIMIT		; compare to LOWEST_LIMIT for a valid number
 0000009B  7C 51			jl		_notValid
 0000009D  83 F8 FF			cmp		eax, HIGHEST_LIMIT		; compare to HIGHEST_LIMIT for a valid number
 000000A0  7F 4C			jg		_notValid
 000000A2  83 F8 9C			cmp		eax, MID_LIMIT_ONE		; compare to MID_LIMIT_ONE for a valid number
 000000A5  7E 0C			jle		_validNum
 000000A7  83 F8 CE			cmp		eax, MID_LIMIT_TWO		; compare to MID_LIMIT_TWO for a valid number
 000000AA  7C 42			jl		_notValid
 000000AC  EB 05			jmp		_validNum
 000000AE  E9 0000012E			jmp		_tryAgain

				;------------------------------
				; If a number is valid, program will increase the total valid numbers,
				;	adds up the user number to other user numbers that have been deemed as valid.
				;	Program will then check to see if the number is less than or greater than the
				;	mininum and maximum values entered already.
				;	If so, program jumps to set either a new minimum or maximum
				;	Otherwise, return to user prompt for a new input number
				;------------------------------

 000000B3			_validNum:
 000000B3  FF 05 000002FD R		inc		validNumber				; increase the validNumber variable for each valid number
 000000B9  01 05 00000301 R		add		sumNumbers,	eax			; add valid number to the total sum
 000000BF  A1 000002F9 R		mov		eax, userNum1
 000000C4  3B 05 00000305 R		cmp		eax, maxNumbers			; compare user number to max number
 000000CA  7F 0A			jg		_setMax
 000000CC  3B 05 00000309 R		cmp		eax, minNumbers			; compare user number to min number
 000000D2  7C 0E			jl		_setMin
 000000D4  EB 9A			jmp		_userPrompt

				;---------------------------------
				; Program will set a new maximum number before returning to
				;	prompt user for new number
				;
				;----------------------------------
 000000D6			_setMax:
 000000D6  A1 000002F9 R		mov		eax, userNum1
 000000DB  A3 00000305 R		mov		maxNumbers, eax			; set a new Maximum number
 000000E0  EB 8E			jmp		_userPrompt

				;------------------------------
				; Program will set a new minimum number before returning to
				;	prompt user for a new number
				;
				;-------------------------------
 000000E2			_setMin:
 000000E2  A1 000002F9 R		mov		eax, userNum1
 000000E7  A3 00000309 R		mov		minNumbers,	eax			;set a new Minimum number
 000000EC  EB 82			jmp		_userPrompt

				;-------------------------------------
				; If a user input a number that is not within the indicated range,
				;	user will be prompted of the mistake and return to user prompt
				;
				;-----------------------------------
 000000EE			_notValid:
 000000EE  BA 000001EA R		mov		EDX, OFFSET	invalInput
 000000F3  E8 00000000 E		call	WriteString
 000000F8  E8 00000000 E		call	CrLf
 000000FD  E9 FFFFFF6E			jmp		_userPrompt

				;----------------------------------
				; Checks to see how many total valid numbers exists.
				;	If one, jumps to sets min number to equal max number
				;	If less than 1 or invalid input like a char or string,
				;	user is prompted to try again
				;	If more than 1, jump to calculate average
				;
				;----------------------------------

 00000102			_totalValid:
 00000102  A1 000002FD R		mov		EAX, validNumber	
 00000107  BB 00000001			mov		EBX, 1
 0000010C  3B C3			cmp		EAX, EBX			; compares if valid numbers equals 1
 0000010E  74 0A			je		_oneValid
 00000110  3B C3			cmp		eax, EBX			; checks if valid numbers is 0 or an invalid input
 00000112  0F 8C 000000C9		jl		_tryAgain
 00000118  EB 0C			jmp		_calcNumbers

				;----------------------------------
				; If only one valid input, set min number to
				;	equal maximum number before moving to calculate average
				;
				;----------------------------------

 0000011A			_oneValid:
 0000011A  A1 00000305 R		mov		eax, maxNumbers
 0000011F  A3 00000309 R		mov		minNumbers, eax			; set minimum number to maximum number
 00000124  EB 00			jmp		_calcNumbers
					
				;-------------------------------------
				; Calculate the average after a user
				;	input a number greater than -1	
				;
				;-------------------------------------
 00000126			_calcNumbers:
 00000126  A1 00000301 R		mov		EAX, sumNumbers
 0000012B  8B 1D 000002FD R		mov		ebx, validNumber
 00000131  99				cdq
 00000132  F7 3D 000002FD R		IDIV	validNumber				; divide the sum of all numbers by total valid numbers
 00000138  A3 0000030D R		mov		averageNums, EAX		
 0000013D  EB 00			jmp		_outroStatement
					
				;----------------------------------
				; Program will return the total valid numbers,
				;	sum of all numbers, average of the numbers,
				;	maximum value and minimum value before closing.
				;
				;----------------------------------

 0000013F			_outroStatement:

 0000013F  BA 00000222 R		mov		EDX, OFFSET	confirmOne
 00000144  E8 00000000 E		call	WriteString
 00000149  A1 000002FD R		mov		EAX, validNumber		; return total of valid numbers
 0000014E  E8 00000000 E		call	WriteDec
 00000153  BA 0000022F R		mov		EDX, OFFSET	confirmTwo
 00000158  E8 00000000 E		call	WriteString
 0000015D  E8 00000000 E		call	CrLf

 00000162  BA 0000026C R		mov		EDX, OFFSET	sumNum
 00000167  E8 00000000 E		call	WriteString
 0000016C  A1 00000301 R		mov		EAX, sumNumbers			; return the sum of all numbers
 00000171  E8 00000000 E		call	WriteInt
 00000176  E8 00000000 E		call	CrLF

 0000017B  BA 0000023E R		mov		EDX, OFFSET	maxNum
 00000180  E8 00000000 E		call	WriteString
 00000185  A1 00000305 R		mov		EAX, maxNumbers			; return the maximum number
 0000018A  E8 00000000 E		call	WriteInt
 0000018F  E8 00000000 E		call	CrLf

 00000194  BA 00000255 R		mov		EDX, OFFSET	minNum
 00000199  E8 00000000 E		call	WriteString
 0000019E  A1 00000309 R		mov		EAX, minNumbers			; return the minimum number
 000001A3  E8 00000000 E		call	WriteInt
 000001A8  E8 00000000 E		call	CrLf

 000001AD  BA 0000028E R		mov		EDX, OFFSET	avgNum
 000001B2  E8 00000000 E		call	WriteString
 000001B7  A1 0000030D R		mov		EAX,	averageNums		; return the rounded average
 000001BC  E8 00000000 E		call	WriteInt
 000001C1  E8 00000000 E		call	CrLf

 000001C6  BA 000002A6 R		mov		EDX, OFFSET	outroMess
 000001CB  E8 00000000 E		call	WriteString
 000001D0  BA 00000140 R		mov		EDX, OFFSET	userName
 000001D5  E8 00000000 E		call	WriteString
 000001DA  E8 00000000 E		call	CrLf
 000001DF  EB 14			JMP		_Exit					; jumps to exit

				;-------------------------------------
				; If no valid numbers are available
				;	or a user input a char or string,
				;	prompt user to try again
				;
				;-------------------------------------
 000001E1			_tryAgain:
 000001E1  BA 000002D4 R		mov		EDX, OFFSET	noNumbers
 000001E6  E8 00000000 E		call	WriteString
 000001EB  E8 00000000 E		call	CrLf
 000001F0  E9 FFFFFE7B			jmp		_userPrompt				; return to _userPrompt to try again

				;------------------------------
				; Exits the program
				;
				;------------------------------

 000001F5			_Exit:

					Invoke ExitProcess,0			; exit to operating system
 000001F5  6A 00	   *	    push   +000000000h
 000001F7  E8 00000000 E   *	    call   ExitProcess


 000001FC			main ENDP



				END main
Microsoft (R) Macro Assembler Version 14.29.30147.0	    02/12/23 20:42:10
'Proj3_zamoraab     (Proj3_zamoraab.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000311 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001FC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001FC Public STDCALL
  _userPrompt  . . . . . . . . .	L Near	 00000070 _TEXT	
  _validNum  . . . . . . . . . .	L Near	 000000B3 _TEXT	
  _setMax  . . . . . . . . . . .	L Near	 000000D6 _TEXT	
  _setMin  . . . . . . . . . . .	L Near	 000000E2 _TEXT	
  _notValid  . . . . . . . . . .	L Near	 000000EE _TEXT	
  _totalValid  . . . . . . . . .	L Near	 00000102 _TEXT	
  _oneValid  . . . . . . . . . .	L Near	 0000011A _TEXT	
  _calcNumbers . . . . . . . . .	L Near	 00000126 _TEXT	
  _outroStatement  . . . . . . .	L Near	 0000013F _TEXT	
  _tryAgain  . . . . . . . . . .	L Near	 000001E1 _TEXT	
  _Exit  . . . . . . . . . . . .	L Near	 000001F5 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HIGHEST_LIMIT  . . . . . . . . .	Number	 -00000001h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWEST_LIMIT . . . . . . . . . .	Number	 -000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MID_LIMIT_ONE  . . . . . . . . .	Number	 -00000064h   
MID_LIMIT_TWO  . . . . . . . . .	Number	 -00000032h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
averageNums  . . . . . . . . . .	DWord	 0000030D _DATA	
avgNum . . . . . . . . . . . . .	Byte	 0000028E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
confirmOne . . . . . . . . . . .	Byte	 00000222 _DATA	
confirmTwo . . . . . . . . . . .	Byte	 0000022F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greetCont  . . . . . . . . . . .	Byte	 00000132 _DATA	
greeting . . . . . . . . . . . .	Byte	 0000011E _DATA	
instrucVar2  . . . . . . . . . .	Byte	 00000189 _DATA	
instrucVar . . . . . . . . . . .	Byte	 00000159 _DATA	
invalInput . . . . . . . . . . .	Byte	 000001EA _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxNumbers . . . . . . . . . . .	DWord	 00000305 _DATA	
maxNum . . . . . . . . . . . . .	Byte	 0000023E _DATA	
minNumbers . . . . . . . . . . .	DWord	 00000309 _DATA	
minNum . . . . . . . . . . . . .	Byte	 00000255 _DATA	
noNumbers  . . . . . . . . . . .	Byte	 000002D4 _DATA	
numInput . . . . . . . . . . . .	Byte	 000001DB _DATA	
outroMess  . . . . . . . . . . .	Byte	 000002A6 _DATA	
progDescr  . . . . . . . . . . .	Byte	 00000036 _DATA	
progIntro  . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumNumbers . . . . . . . . . . .	DWord	 00000301 _DATA	
sumNum . . . . . . . . . . . . .	Byte	 0000026C _DATA	
userName . . . . . . . . . . . .	Byte	 00000140 _DATA	
userNum1 . . . . . . . . . . . .	DWord	 000002F9 _DATA	
validNumber  . . . . . . . . . .	DWord	 000002FD _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
